using UnityEngine;
using UnityEngine.Events;

public class Movement : MonoBehaviour
{
	[SerializeField] public float m_JumpForce = 400f;                          // Amount of force added when the player jumps.
	[Range(0, 1)][SerializeField] public float m_CrouchSpeed = .36f;           // Amount of maxSpeed applied to crouching movement. 1 = 100%
	[Range(0, .3f)][SerializeField] private float m_MovementSmoothing = .05f;   // How much to smooth out the movement
	[SerializeField] public bool m_AirControl = false;                         // Whether or not a player can steer while jumping;
	[SerializeField] private LayerMask m_WhatIsGround;                          // A mask determining what is ground to the character
	[SerializeField] private Transform m_GroundCheck;                           // A position marking where to check if the player is grounded.
	[SerializeField] private Transform m_CeilingCheck;                          // A position marking where to check for ceilings
	[SerializeField] private Collider2D m_CrouchDisableCollider;                // A collider that will be disabled when crouching
	[SerializeField] private LayerMask wallLayer;   
	[SerializeField] private Transform wallCheck; 

	const float k_GroundedRadius = .2f; // Radius of the overlap circle to determine if grounded
	private bool m_Grounded;            // Whether or not the player is grounded.
	const float k_CeilingRadius = .2f; // Radius of the overlap circle to determine if the player can stand up
	private Rigidbody2D m_Rigidbody2D;
	private bool m_FacingRight = true;  // For determining which way the player is currently facing.
	private Vector3 m_Velocity = Vector3.zero;

	private bool isWallSliding;
	private float wallSlidingSpeed = 2f;
	private bool isWallJumping;
	private float wallJumpingDirection;
	private float wallJumpingTime = 0.2f;
	private float wallJumpingCounter;
	private float wallJumpingDuration = 0.4f;
	private Vector2 wallJumpingPower = new Vector2(16f, 16f);

	private float horizontal; 

	private int jumpCount = 0;

	public bool wasGrounded;

	[Header("Events")]
	[Space]

	public UnityEvent OnLandEvent;

	[System.Serializable]

	public class BoolEvent : UnityEvent<bool> { }

	public BoolEvent OnCrouchEvent;

	private bool m_wasCrouching = false;

	private void Awake()
	{
		m_Rigidbody2D = GetComponent<Rigidbody2D>();


		if (OnLandEvent == null)
		{
			OnLandEvent = new UnityEvent();
		}



		if (OnCrouchEvent == null)
		{
			OnCrouchEvent = new BoolEvent();
		}
	}

	private void FixedUpdate()
	{
		wasGrounded = m_Grounded;

		m_Grounded = false;
		// The player is grounded if a circlecast to the groundcheck position hits anything designated as ground
		// This can be done using layers instead but Sample Assets will not overwrite your project settings.

		Collider2D[] colliders = Physics2D.OverlapCircleAll(m_GroundCheck.position, k_GroundedRadius, m_WhatIsGround);

		for (int i = 0; i < colliders.Length; i++)
		{
			if (colliders[i].gameObject != gameObject)
			{
				m_Grounded = true;

				jumpCount = 0;

				if (!wasGrounded)
				{
					OnLandEvent.Invoke();
				}
			}
		}
		WallSlide();
		WallJump();
	}

	private bool IsWalled()
    {
		return Physics2D.OverlapCircle(wallCheck.position, 0.2f, wallLayer);
    }


	private void WallSlide()
    {
		if(IsWalled() && m_Grounded == false && horizontal != 0f)
        {
			isWallSliding = true;
			m_Rigidbody2D.velocity = new Vector2(m_Rigidbody2D.velocity.x, Mathf.Clamp(m_Rigidbody2D.velocity.y, -wallSlidingSpeed, float.MaxValue));
        }
        else
        {
			isWallSliding = false;
        }
    }

	private void WallJump()
	{
		if (isWallSliding)
		{
			isWallJumping = false;
			wallJumpingDirection = -transform.localScale.x;
			wallJumpingCounter = wallJumpingTime;

			CancelInvoke(nameof(StopWallJumping));
		}
		else
		{
			wallJumpingCounter -= Time.deltaTime;
		}
	}

	private void JumpOffWall()
	{
		isWallJumping = true;
		m_Rigidbody2D.velocity = new Vector2(wallJumpingDirection * wallJumpingPower.x, wallJumpingPower.y);
		wallJumpingCounter = 0f;

		if (transform.localScale.x != wallJumpingDirection)
		{
			m_FacingRight = !m_FacingRight;
			Vector3 localScale = transform.localScale;
			localScale.x *= -1f;
			transform.localScale = localScale;
		}

		Invoke(nameof(StopWallJumping), wallJumpingDuration);
	}

	private void StopWallJumping()
    {
		isWallJumping = false;
    }

	public void Move(float move, bool crouch, bool jump)
	{
		// If crouching, check to see if the character can stand up
		if (!crouch)
		{
			// If the character has a ceiling preventing them from standing up, keep them crouching

			if (Physics2D.OverlapCircle(m_CeilingCheck.position, k_CeilingRadius, m_WhatIsGround))
			{
				crouch = true;
			}
		}

		//only control the player if grounded or airControl is turned on

		if (m_Grounded || m_AirControl)
		{
			// If crouching
			if (crouch)
			{
				if (!m_wasCrouching)
				{
					m_wasCrouching = true;

					OnCrouchEvent.Invoke(true);
				}
				// Reduce the speed by the crouchSpeed multiplier

				move *= m_CrouchSpeed;

				// Disable one of the colliders when crouching

				if (m_CrouchDisableCollider != null)
				{
					m_CrouchDisableCollider.enabled = false;
				}

			}
			else
			{
				// Enable the collider when not crouching
				if (m_CrouchDisableCollider != null)
				{
					m_CrouchDisableCollider.enabled = true;
				}

				if (m_wasCrouching)
				{
					m_wasCrouching = false;

					OnCrouchEvent.Invoke(false);
				}
			}

			// Move the character by finding the target velocity

			Vector3 targetVelocity = new Vector2(move * 10f, m_Rigidbody2D.velocity.y);

			// And then smoothing it out and applying it to the character

			m_Rigidbody2D.velocity = Vector3.SmoothDamp(m_Rigidbody2D.velocity, targetVelocity, ref m_Velocity, m_MovementSmoothing);

			horizontal = move;

			// If the input is moving the player right and the player is facing left...

			if (move > 0 && !m_FacingRight)
			{
				Flip();
			}

			// Otherwise if the input is moving the player left and the player is facing right...

			else if (move < 0 && m_FacingRight)
			{
				Flip();
			}
		}

		// If the player should jump...

		if (jump)
		{
			if (jumpCount == 0 && wasGrounded == true)
			{
				// Add a vertical force to the player.

				m_Grounded = false;

				m_Rigidbody2D.AddForce(new Vector2(0f, m_JumpForce));

				jumpCount++;
			}
			else if(IsWalled())
            {
				JumpOffWall();
            }
			else if(jumpCount == 0 && wasGrounded == false)
            {
				m_Rigidbody2D.velocity = new Vector2(0.0f, 0.0f);
				m_Rigidbody2D.AddForce(new Vector2(0f, m_JumpForce));

				jumpCount++;
			}
			else if (jumpCount < 1)
			{
				m_Rigidbody2D.AddForce(new Vector2(0f, m_JumpForce));

				jumpCount++;
			}
			
		}
	}

	private void Flip()
	{
		// Switch the way the player is labelled as facing.

		m_FacingRight = !m_FacingRight;

		// Multiply the player's x local scale by -1.

		Vector3 theScale = transform.localScale;

		theScale.x *= -1;

		transform.localScale = theScale;
	}
}
