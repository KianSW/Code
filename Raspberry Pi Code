import serial
import time
import cv2
import imutils
import numpy as np
import pytesseract
from PIL import Image

cam = cv2.VideoCapture(0)

Time = 0

Plate1 = ""
T1 = 0
Plate2 = ""
T2 = 0
Plate3 = ""
T3 = 0

Counter = 0

def ReadPlate():
        check, frame = cam.read()
        img = cv2.resize(frame,(320,240))
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) #convert to grey scale
        gray = cv2.bilateralFilter(gray, 11, 17, 17) #Blur to reduce noise
        edged = cv2.Canny(gray, 30, 200) #Perform Edge detection

        cnts = cv2.findContours(edged.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        cnts = imutils.grab_contours(cnts)
        cnts = sorted(cnts, key = cv2.contourArea, reverse = True)[:10]
        screenCnt = None

        for c in cnts:

            peri = cv2.arcLength(c, True)
            approx = cv2.approxPolyDP(c, 0.018 * peri, True)

            if len(approx) == 4:

                screenCnt = approx

            break

        if screenCnt is None:

            detected = 0
            print ("No contour detected")

        else:

            detected = 1

        if detected == 1:

            cv2.drawContours(img, [screenCnt], -1, (0, 255, 0), 3)

        mask = np.zeros(gray.shape,np.uint8)
        new_image = cv2.drawContours(mask,[screenCnt],0,255,-1,)
        new_image = cv2.bitwise_and(img,img,mask=mask)

        (x, y) = np.where(mask == 255)
        (topx, topy) = (np.min(x), np.min(y))
        (bottomx, bottomy) = (np.max(x), np.max(y))
        Cropped = gray[topx:bottomx+1, topy:bottomy+1]

        text = pytesseract.image_to_string(Cropped, config='--psm 11')
    
        cv2.imshow('image',img)
        cv2.imshow('Cropped',Cropped)
    
        print("Detected Number is:",text)

        if Counter == 0:
            Plate1 = text
            T1 = Time
        elif Counter == 1:
            Plate2 = text
            T2 = Time
        elif Counter == 2:
            Plate3 = text
            T3 = Time

        Counter + 1




while True:
    
    # Set up our serial communication, you will need to change ttyUSB0 to match your serial port, 9600 is the baud rate
    ser = serial.Serial('/dev/ttyACM0', 9600, timeout=1)
    ser.reset_input_buffer()

    while True:
        
        if ser.in_waiting > 0:
            line = ser.readline().decode('utf-8').rstrip()
            print(line)
            Time = Time+1
            time.sleep(1)

            if line == "Car":
                ReadPlate()
                ser.write(b"PlateRead\n")
